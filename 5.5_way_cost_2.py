# Квадрат разлинован на N×N клеток (1 < N < 17). Исполнитель Робот может перемещаться по клеткам,
# выполняя за одно перемещение одну из двух команд: вправо или вверх. По команде вправо Робот перемещается в соседнюю
# правую клетку, по команде вверх – в соседнюю верхнюю. При попытке выхода за границу квадрата Робот разрушается.
# Перед каждым запуском Робота в каждой клетке квадрата лежит монета достоинством от 1 до 100. Посетив клетку,
# Робот забирает монету с собой; это также относится к начальной и конечной клетке маршрута Робота.
# Исходные данные записаны в файле 18-10.xls в виде электронной таблице размером N×N, каждая ячейка которой
# соответствует клетке квадрата. Определите максимальную и минимальную денежную сумму, которую может собрать Робот,
# пройдя из левой НИЖНЕЙ клетки в правую ВЕРХНЮЮ. В ответе укажите два числа – сначала максимальную сумму,
# затем минимальную.
#
# Ответ: 1276 719
#
# Формат входных данных
#
# Исходная таблица:
#
# В первой строке два числа n строк и m столбцов, далее следуют значения ячеек таблицы.
# Формат выходных данных
#
# Два числа: максимальная сумма и минимальная.
# Sample Input:
#
# 10 10
# 63  78  58  93  49  83  92  3   51  57
# 10  1   42  24  55  59  66  48  76  79
# 25  29  87  76  99  63  32  22  87  48
# 88  40  65  9   86  38  56  31  46  95
# 79  91  77  62  60  73  90  44  41  51
# 47  39  73  7   68  4   91  32  75  44
# 59  65  23  87  58  93  64  34  1   64
# 42  96  69  33  83  8   37  41  37  91
# 49  27  94  18  89  55  31  97  62  92
# 25  68  71  13  67  83  37  22  13  8
# Sample Output:
#
# 1276 719
def get_way_cost(min_max, array_, row_, column_):
    new_array = [[] for _ in range(row_ - 1)]
    new_array.append([sum(array_[-1][0:i + 1]) for i in range(column_)])
    for i in range(row_ - 1, 0, -1):
        line = [array_[i - 1][0] + new_array[i][0]]
        for j in range(1, column_):
            line.append(array_[i - 1][j] + min_max(new_array[i][j], line[j - 1]))
        new_array[i - 1] = line
    return new_array[0][-1]


row, columns = map(int, input().split())
array = []
for i in range(row):
    array.append(list(map(int, input().split())))
print(get_way_cost(max, array, row, columns), get_way_cost(min, array, row, columns))
